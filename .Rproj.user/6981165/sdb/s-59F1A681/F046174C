{
    "contents" : "Predict Human Activity Quality from Activity Monitors\n========================================================\n```{r echo=FALSE, results='hide', message=FALSE}\nrequire(caret)\ntrain<-read.csv(\"pml-training.csv\")\ntest<-read.csv(\"pml-testing.csv\")\n```\n\n### Data Cleansing and Preparation\n\nAfter loading the csv files (pml-training.csv and pml-testing.csv), it is noticed that the original data is kind of noisy. Some data columns have too many *NA* values, and they may not be helpful in terms of building a good predictive machine learning model. As shown below, there are 67 columns in training dataset with more than 90% of *NAs*, while in testing dataset, there are 100 columns that contain only *NAs*. \n\n```{r}\nsum(colSums(is.na(train)) > nrow(train) *0.9)\nsum(colSums(is.na(test)) == nrow(test))\n```\nTherefore, the first step here is to remove these *NA* data columns. The following R program presents our approach of removing *NA* data columns from both training and testing dataset. Please note that the data columns in training and testing dataset should be consistent, i.e. they must share exactly the same \"predictors\". \n\n```{r}\ntrain<-train[, colSums(is.na(train)) < nrow(train)/10 ] #removing data columns with 90% NAs from training dataset.\ntest<-test[, colSums(is.na(test)) != nrow(test)] # removing data columns with all NAs from testing dataset.\ncommonCols <-intersect(names(train), names(test)) #find the common columns between training and testing dataset.\ncommonCols[length(commonCols) +1] <- \"classe\" # adding the column \"classe\" back.\ntrain<-train[, which(names(train) %in% commonCols)] #prodcue the final training dataset\ntest<-test[,which(names(test) %in% commonCols)] #produce the final testing dataset\n```\n\nIn addtion to the *NA* valules, according to our understanding about this problem, some data columns, such as \"user name\", \"time stamps\", and \"windows\", may not play a significant role in predicting the final result. Therefore, we decide to remove those data columns from the dataset as well.\n\n**As a result of this data preparation phase, the final training dataset has 53 columns, and the final testing dataset has 52 columns (without the predicting column \"classe\")**\n\n```{r echo=FALSE }\ntrain<-train[,8:60]\ntest<-test[,8:59]\n```\n\n### Partition Data for Cross-Validation\n\nIn order to perform necessary cross validation of the model, the original training dataset is further divided into two horizonal subsets. 70% of the data will be used to train the model, and the rest 30% of the data will be used for cross validation. The detailed R program to partition the dataset is attached below.\n\n```{r}\ninTrain<-createDataPartition(y=train$classe, p=0.7, list=FALSE)\n\ntraining<-train[inTrain,]\ntrainingData<-training[,1:52]\ntrainingClass<-training[,53]\n\ncross<-train[-inTrain,]\ncrossData<-cross[,1:52]\ncrossValidationValue<-cross[,53]\n```\n\n### Build Predictive Model\n\nThere may be multiple alternatives available for us to build a predictive model. In order to get a quick understanding on which one might be the best choice, given this particular case, we created a smaller-size dataset (e.g. 5% of the training data), and rapidly build differnt models with different methods, along with some quick model analysis. \n\n``` {r echo=FALSE}\n#create smaller dataset(training and testing) for rapid modeling\nsmallTrain<-createDataPartition(y=training$classe, p=0.05, list=FALSE)\nsTraining<-training[smallTrain,]\nsmallTest<-createDataPartition(y=cross$classe, p=0.1, list=FALSE)\nsTesting<-cross[smallTest,]\n```\n\nAs shown in the R program below, we selected 4 different methods, and they are: Random Forests (rf), Linear Discriminant Analysis (lda), K Nearest Neighbors (knn), and Gradient Boosted Methods (gbm).\n\n```{r message=FALSE}\n#Build different models \nmodelRF<-train(sTraining[,1:52], sTraining[,53], ntree=100, method=\"rf\")\nmodelLDA<-train(sTraining[,1:52], sTraining[,53], method=\"lda\")\nmodelKNN<-train(sTraining[,1:52], sTraining[,53], method=\"knn\")\nmodelGBM<-train(sTraining[,1:52], sTraining[,53], method=\"gbm\", verbose=FALSE)\n```\n\nAfter quickly build these 4 predictive models, a quick round of analysis of predictive accurancy is aso performed, and the results are plotted below.\n\n```{r}\n#Perform quick model analysis\ntLDA<-table(predict(modelLDA, sTesting[,1:52]), sTesting[,53])\ntGBM<-table(predict(modelGBM, sTesting[,1:52]), sTesting[,53])\ntRF<-table(predict(modelRF, sTesting[,1:52]), sTesting[,53])\ntKNN<-table(predict(modelKNN, sTesting[,1:52]), sTesting[,53])\n\n#Plot analysis results\npar(mfrow=c(2,2))\nplot(tKNN, main=\"K Nearest Neighbor\")\nplot(tLDA, main=\"Liner Discriminant Analysis\")\nplot(tGBM, main=\"Gradient Boosted Method\")\nplot(tRF, main=\"Random Forest\")\n```\n\nAs shown in the model perforamnce analysis above, it seems that Random Forests and Gradient Boosted Methods deliver a better performance than the other two. With a little closer look, it seems that the Random Forests may be slightly better than the Gradient Boosted Methods. Therefore, we will pick ***Random Forests*** to build the final predictive model.\n\nThe R code below creates a Random Forests model with the variable *ntree* set to 800. The previously prepared training dataset is used to train this model. The detailed result of the trained predictive model is presented below, including the ***OOB estimte of error rate*** and the detailed ***confusion matrix***. \n\n```{r}\nmodelRF<-randomForest(trainingData, trainingClass, ntree=800)\nmodelRF\n```\n\n### Perform Cross Validation\n\nThe predictive model is applied against the cross-validation dataset (30% of the orignal training data) that was set aside previously. The detailed performance of this predictive model against the cross-validation dataset is shown below. \n```{r echo=FALSE}\npredictedValue<-predict(modelRF, crossData)\nPredictionPerformance<-table(predictedValue, crossValidationValue)\nPredictionPerformance\nplot(PredictionPerformance)\n```\n\n**The out-of-sample error rate is:**\n```{r echo=FALSE}\nsum(predictedValue!=crossValidationValue)/length(crossValidationValue)\n```\n\n### Final Prediction Result\nHere is the predition result of applying the final predictive model against the original testing csv file. The results actually passed all 20 test cases in the second part of this project.\n\n```{r}\nanswers<-predict(modelRF, test)\nanswers\n```\n\n\n",
    "created" : 1411004891752.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1822631422",
    "id" : "F046174C",
    "lastKnownWriteTime" : 1411006973,
    "path" : "D:/OnlineCourses/Practical Machine Learning/project/HMA/HMA.Rmd",
    "project_path" : "HMA.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}